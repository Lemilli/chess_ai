import numpy as np
# Arrays needed for pieces evaluation at a given square in a chess board
pawn_eval_black = np.array((
    (0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0),
    (5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0),
    (1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0),
    (0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5),
    (0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0),
    (0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5),
    (0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5),
    (0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0) 
))
pawn_eval_white = pawn_eval_black[::-1]
# From 2d to 1 dimensional array
pawn_eval_white = pawn_eval_white.reshape(64)  
pawn_eval_black = pawn_eval_black.reshape(64)

# Already symmetric => same array for white and black
knight_eval = np.array(( 
    (-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0),
    (-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0),
    (-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0),
    (-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0),
    (-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0),
    (-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0),
    (-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0),
    (-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0)
))
knight_eval = knight_eval.reshape(64)
bishop_eval_black = np.array((
    (-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0),
    (-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0),
    (-1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0),
    (-1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0),
    (-1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0),
    (-1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0),
    (-1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0),
    (-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0)
))
bishop_eval_white = bishop_eval_black[::-1]
# From 2d to 1 dimensional array
bishop_eval_white = bishop_eval_white.reshape(64)
bishop_eval_black = bishop_eval_black.reshape(64)

rook_eval_black = np.array((
    ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0),
    ( 0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5),
    (-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5),
    (-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5),
    (-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5),
    (-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5),
    (-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5),
    ( 0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
))
rook_eval_white = rook_eval_black[::-1]
# From 2d to 1 dimensional array
rook_eval_white = rook_eval_white.reshape(64)
rook_eval_black = rook_eval_black.reshape(64)
# Already symmetric => same array for white and black
queen_eval = np.array((
    (-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0),
    (-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0),
    (-1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0),
    (-0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5),
    ( 0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5),
    (-1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0),
    (-1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0),
    (-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0)
))
queen_eval = queen_eval.reshape(64)
king_eval_black = np.array((
    (-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0),
    (-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0),
    (-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0),
    (-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0),
    (-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0),
    (-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0),
    ( 2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0),
    ( 2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0)
))
king_eval_white = king_eval_black[::-1]
# From 2d to 1 dimensional array
king_eval_white = king_eval_white.reshape(64)
king_eval_black = king_eval_black.reshape(64)